package fabric

import (
	"fmt"
	"path/filepath"

	"github.com/hyperledger/fabric-sdk-go/pkg/client/channel"
	"github.com/hyperledger/fabric-sdk-go/pkg/core/config"
	"github.com/hyperledger/fabric-sdk-go/pkg/fabsdk"
)

// ContractMeta .
type ContractMeta struct {
	EventFilter string `json:"event_filter"`
	Username    string `json:"username"`
	CCID        string `json:"ccid"`
	ChannelID   string `json:"channel_id"`
	ORG         string `json:"org"`
}

// FabricClient .
type FabricClient struct {
	Client *channel.Client
	Meta   *ContractMeta
	Name   string
}

// New .
// configPath is the config files path generated by goduck, e.g. "config/fabric" .
func New(configPath string) (*FabricClient, error) {
	fabricConfig, err := UnmarshalConfig(configPath)
	if err != nil {
		fmt.Print("UnmarshalConfig fail:", err)
		return nil, fmt.Errorf("Unmarshal config for appchain fabric: %w", err)
	}
	contractMeta := &ContractMeta{
		EventFilter: fabricConfig.EventFilter,
		Username:    fabricConfig.Username,
		CCID:        fabricConfig.CCID,
		ChannelID:   fabricConfig.ChannelId,
		ORG:         fabricConfig.Org,
	}
	configProvider := config.FromFile(filepath.Join(configPath, "config.yaml"))
	sdk, err := fabsdk.New(configProvider)
	if err != nil {
		fmt.Print("fabsdk.New fail:", err)
		return nil, fmt.Errorf("create sdk fail: %s", err.Error())
	}

	channelProvider := sdk.ChannelContext(contractMeta.ChannelID, fabsdk.WithUser(contractMeta.Username), fabsdk.WithOrg(contractMeta.ORG))

	channelClient, err := channel.New(channelProvider)
	if err != nil {
		fmt.Print("channel.New fail:", err)
		return nil, fmt.Errorf("create channel fabcli fail: %s", err.Error())
	}

	return &FabricClient{
		Client: channelClient,
		Meta:   contractMeta,
		Name:   fabricConfig.Name,
	}, nil
}

// Invoke .
// ret is the Payload.
// you can use response.ChaincodeStatus to check Chaincode status.
func (client *FabricClient) Invoke(chaincodeID, funcName string, invokeArgs ...[]byte) (string, error) {
	response, err := client.Client.Execute(channel.Request{
		ChaincodeID: chaincodeID,
		Fcn:         funcName,
		Args:        invokeArgs[:],
	})

	if err != nil {
		fmt.Printf("Failed to invoke: %+v\n", err)
		return "", err
	}
	ret := string(response.Payload)
	return ret, nil
}
